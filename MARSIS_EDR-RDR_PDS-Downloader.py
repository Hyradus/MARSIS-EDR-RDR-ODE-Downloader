#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT for search and download MARSIS EDR/RDR files from PDS
@author: Giacomo Nodjoumi - g.nodjoumi@jacobs-university.de


_________________________________ README _________________________________

The script can work both passing some/all arguments or none

Arguments are:
    
--orbits: csv file containing all orbit to download.

This csv can be manually created or generated by QGIS

------ MANUAL CSV
Is as a one-column csv with "Orbit" (without quotes) as first row
and orbit numbers as new rows. e.g.

                                Orbit
                                02445
                                01285
                                12332
                                ...

------ QGIS CSV                                
Simply is a csv created by saving selected features directly in QGIS.
See full readme for better explaination



--ddir: is the folder where the files will be downloaded
default is a folder called "downloads+datetime".
Automatically created in the directory where is executed the script

--dtype: Select EDR or RDR

If NO argument is passed, defaults are used and interactively requested the others.


@author: Giacomo Nodjoumi - g.nodjoumi@jacobs-university.de
"""

import os
import pathlib
import pandas as pd
import geopandas as gpd
from argparse import ArgumentParser
import shutil
from datetime import datetime
from tqdm import tqdm

import urllib.request as ulr

def answer(question):
    answ = None
    while answ not in ['yes','y','no','n']:
        print("Please enter yes/y or no/n.")    
        answ = input(question+': ')
    return(answ)

def make_folder(name):
    os.getcwd()
    folder = name
    if os.path.exists(folder):
           qst = name + ' Folder exist, remove it? '
           answ = answer(qst)
           if answ in ['yes', 'y']:               
               shutil.rmtree(folder)
               os.mkdir(folder)
               print(name, 'Folder created')
           else:
               now = datetime.now()
               new_name = name +'_' + now.strftime("%d-%m-%Y_%H-%M-%S")
               print(new_name, ' Folder not exist, creating.')
               os.mkdir(new_name)
               print('Created new ', name,' Folder')
    else:
        print(name, ' Folder not exist, creating.')
        os.mkdir(folder)
        print('Created new ', name,' Folder')
    return(folder)


def readGPKG(datatype):
    if datatype in ['rdr', 'RDR']:
        gpkgDF=gpd.read_file('./QGIS_project/mars_mex_marsis_rdrss_c0l.gpkg')
    elif datatype in ['edr']:
        gpkgDF=gpd.read_file('./QGIS_project/mars_mex_marsis_edr_c0l.gpkg')
    return(gpkgDF)

def csv2orbits(csv):
    df = pd.read_csv(csv, dtype=str)
    req_orbits = df['ProductId'].tolist()
    orbits = []
    for orbit in req_orbits:
        orbits.append(orbit.split('_')[1])
    return(orbits)


def interactive_orbits_input(gpkgDF):
#Interactive user input orbit insertion
    req_orbits=[]
    user_inputs = None
    while True:
        user_inputs = input('Insert orbit number (a for all, e for end): ' )
        if user_inputs =='e':
            print('\nRequested orbits are: ', req_orbits)
            break
        elif user_inputs=='a':
            print('\nAll orbits selected')
            req_orbits=gpkgDF['Orbit'].tolist()
            break
        else:
            try:
                int(user_inputs)
                req_orbits.append(user_inputs)
                print('Requested orbits are: ', req_orbits)
            except:
            
                print('Not valid orbit number')
                continue
    return(req_orbits)

def OrbitsCheck(req_orbits, gpkgDF):
    
    ############# check if user selecte orbits are available
    wrong_orbits = list(set(req_orbits) - set(gpkgDF['orbits']))
    print('    Orbits not present: ', wrong_orbits)
    
    for items in wrong_orbits:
        req_orbits.remove(items)
            
    return(req_orbits)


def orbits2urls(req_orbits, gpkgDF):
    download_urls = []
    download_size = 0
    with tqdm(total=len(req_orbits),
              desc = 'Creating file urls',
              unit='File') as pbar:
        for orbit in req_orbits:
            rows = gpkgDF[gpkgDF['orbits']==orbit].index.values.tolist()
            for row in rows:
                df_url=gpkgDF['FilesURL'].iloc[row]
                # print(df_url)
                FileUrl = getFileUrl(df_url)
                download_urls.append(FileUrl)
                pbar.update(1)            
                fsize=int(getFileSize(FileUrl))
                download_size=download_size+fsize
            pass
    return(download_urls, download_size)
    

def getFileUrl(df_url):
    
    from bs4 import BeautifulSoup as BS
    ext = 'dat'
    u = ulr.urlopen(df_url)
    page = u.read().decode('utf-8')
    soup = BS(page, 'html.parser')
    FUrl= [node.get('href') for node in soup.find_all('a') if node.get('href').endswith(ext)][0]
    return(FUrl)

def getFileSize(FileUrl):
    # FileUrl = getFileUrl(url)
    
    meta= ulr.urlopen(FileUrl).info()
    fsize = meta.get('Content-Length')
    
    return(fsize)

def getFile(url):
    fname = pathlib.Path(url).name
    savename = fname
    v = 0
    while os.path.exists(savename):
        
        v = v+1
        savename = str(v) +'_'+fname
        ulr.urlretrieve(url, fname)
    else:
        ulr.urlretrieve(url, savename)
   
        

############################# DOWNLOAD #############################
            

def download(download_urls, download_size, ddir,units):
    os.chdir(ddir)
    with tqdm(total=download_size, unit=units, unit_scale=True) as pbar:
            for urls in download_urls:
                getFile(urls)
                fsize=int(getFileSize(urls))
                pbar.update(fsize)


def retreival(req_orbits, gpkgDF):
      
    download_urls, download_size = orbits2urls(req_orbits, gpkgDF)
    units = 'MB'
    size = float(download_size/1000000)
    if size > 1000:
        size = size/1000
        units = 'GB'    
    print('\n', len(download_urls),' files requested with a size of: ', size, units)
        
    answ = answer('Proceed with the download?')
    if answ in ['yes','y']:
        download(download_urls, download_size, ddir, units)
    
    else:
        print('\nSkipping download')


def main(gpkgDF, req_orbits):
   
    if req_orbits == None:
        req_orbits= interactive_orbits_input(gpkgDF)
    req_orbits = OrbitsCheck(req_orbits,gpkgDF)
    
    retreival(req_orbits, gpkgDF)
    
    print('\nAll operations completed')


if __name__ == "__main__":
    global ddir
    
    parser = ArgumentParser()
    parser.add_argument('--pwd', help='password for ftp login')
    parser.add_argument('--orbits', help='Csv with orbits')
    parser.add_argument('--ddir', help='Download folder')
    parser.add_argument('--dtype', help='Data type, EDR or RDR')
    
    args = parser.parse_args()
    pwd=args.pwd
    orbits_file = args.orbits
    ddir = args.ddir
    dtype=args.dtype

    if orbits_file is None:
        req_orbits = None
    else:
        req_orbits=csv2orbits(orbits_file)

    if ddir is None:
        ddir = os.getcwd()+'/'+ make_folder('downloaded')
    
    if dtype is None:
        while dtype not in ['rdr', 'RDR', 'edr', 'EDR']:
            print('Please enter rdr/RDR, edr/EDR')
            dtype = input('Enter data type: ')
    
    gpkgDF = readGPKG(dtype)
    
    main(gpkgDF, req_orbits)
   



